import numpy as np
from pyrr import Matrix44, Vector3
import moderngl as mgl
from pyrousel.shader import ShaderBase, ShaderFallback, ShaderWireframeFallback
from pyrousel.model import RenderModel

class GFX(object):
    def __init__(self, ctx: mgl.Context):
        self.__ctx = ctx
        self.__ctx.enable(mgl.DEPTH_TEST)
        self.__ctx.enable(mgl.BLEND)
        self.__ctx.blend_func = (mgl.SRC_ALPHA, mgl.ONE_MINUS_SRC_ALPHA)
        self.view_matrix: Matrix44 = Matrix44.identity().astype('float32')
        self.perspective_matrix: Matrix44  = Matrix44.identity().astype('float32')

        self.def_shader = self.CompileShaderProgram(ShaderFallback())
        self.def_wire_shader = self.CompileShaderProgram(ShaderWireframeFallback())

    def GetContext(self) -> mgl.Context:
        """
        Returns handle to the active OpenGL context
        """
        return self.__ctx

    def SetViewMatrix(self, viewmat: Matrix44):
        """
        Updates active view transform matrix
        """
        self.view_matrix = viewmat.astype('float32')

    def SetPerspectiveMatrix(self, perspmat: Matrix44):
        """
        Updates active view perspective projection matrix
        """
        self.perspective_matrix = perspmat.astype('float32')

    def CompileShaderProgram(self, shader: ShaderBase) -> mgl.Program:
        """
        Compiles given shader source and returns GLSL program handle

        Passed shader source should have vertex_shader and fragment_shader defined at minimum.

        Parameters
        ----------
        shader : ShaderBase
            Shader source to comile shader program from

        Returns
        -------
        OpenGL object representation of compiled shader program
        """
        return self.GetContext().program(shader.vertex_source, shader.fragment_source)

    def ClearScreen(self, red: float, green: float, blue: float) -> None:
        """
        Redraws entire screen with given color value

        All passed color values should be normalised (0.0 - 1.0)

        Parameters
        ----------
        red : float
            Red channel color value
        green : float
            Green channel color value
        blue : float
            Blue channel color value
        """
        self.GetContext().clear(red, green, blue)

    def GenModelBuffers(self, model: RenderModel):
        """
        Generates given model buffers objects (vertex, index, etc.)

        Parameters
        ----------
        model : RenderModel
            Model to generate buffers for
        """
        model.vertex_buffer = self.GetContext().buffer(model.vertices)
        model.normal_buffer = self.GetContext().buffer(model.normals)
        model.index_buffer = self.GetContext().buffer(model.indices)

    def DrawModel(self, model: RenderModel):
        """
        Draws given model to the screen

        Passed RenderModel should have the followinng buffers generated:
            -- Vertex Position buffer
            -- Vertex Normal buffer
            -- Index buffer

        If given model does not reference valid shader program the renderer will use
        common fallback shader (diff only)

        Parameters
        ----------
        model : RenderModel
            Model to draw to screen
        """
        transform = model.transform.GetMatrix()

        # Vertex attribute layout (pos, normal)
        attribs = [
            (model.vertex_buffer, '3f', 'in_position'),
            (model.normal_buffer, '3f', 'in_normal')
        ]

        shader_program = self.def_shader
        if model.shader != None:
            shader_program = model.shader

        renderable = self.GetContext().vertex_array(
            shader_program,
            attribs,
            index_buffer=model.index_buffer
        )
        
        renderable.program['modelTransform'].write(transform.tobytes())
        renderable.program['viewTransform'].write(self.view_matrix.tobytes())
        renderable.program['perspectiveTransform'].write(self.perspective_matrix.tobytes())
        self.GetContext().wireframe = False
        self.GetContext().polygon_offset = (0,0)
        renderable.render()

    def DrawModelWire(self, model: RenderModel):
        """
        Draws given model wireframe to the screen

        Passed RenderModel should have all the buffers generated by this point.
        Passed RenderModel should have the followinng buffers generated:
            -- Vertex Position buffer
            -- Index buffer
        
        Parameters
        ----------
        model : RenderModel
            Model to draw wireframe from to screen
        """
        mat = model.transform.GetMatrix()

        # Vertex attribute layout (pos, normal)
        attribs = [
            (model.vertex_buffer, '3f', 'in_position'),
        ]

        renderable = self.GetContext().vertex_array(
            self.def_wire_shader,
            attribs,
            index_buffer=model.index_buffer
        )

        renderable.program['modelTransform'].write(mat.tobytes())
        renderable.program['viewTransform'].write(self.view_matrix.tobytes())
        renderable.program['perspectiveTransform'].write(self.perspective_matrix.tobytes())
        renderable.program['color'] = (0.66, 0.66, 0.66, 0.1)

        self.GetContext().wireframe = True
        self.GetContext().polygon_offset = (-10,-10)
        renderable.render()

